{
  // https://www.typescriptlang.org/docs/handbook/tsconfig-json.html
  // 表示只编译数组内的ts文件
  //  "include": ["./demo.ts"],
  // 排除编译的ts文件
  "exclude": [],
  "compilerOptions": {
    /* Basic Options */
    /* Enable incremental compilation 启用增量编译,之前编译过得内容，之后再也不编译 */
    // "incremental": true,
    // 编译成ES5代码
    "target": "es5"
    /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */,
    "module": "commonjs"
    /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */,
    // "lib": [],                             /* Specify library files to be included in the compilation. */
    /* Allow javascript files to be compiled.允许编译 javascript 文件 */
    "allowJs": true,
    /* Report errors in .js files. 报告.js文件中的错误  检测js语法中的错误*/
    "checkJs": true,
    // "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    // "declaration": true,                   /* Generates corresponding '.d.ts' file. */
    // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
    /* Generates corresponding '.map' file. 生成相应的“.map”文件 */
    "sourceMap": true,
    // "outFile": "./",                       /* Concatenate and emit output to single file. */
    /* Redirect output structure to the directory. 将输出结构重定向到目录 */
    "outDir": "./build",
    /* Specify the root directory of input files. Use to control the output directory structure with --outDir. 指定输入文件的根目录。使用 --outDir 控制输出目录结构*/
    "rootDir": "./src",
    // "composite": true,                     /* Enable project compilation */
    // "tsBuildInfoFile": "./",               /* Specify file to store incremental compilation information */
    /* Do not emit comments to output. 编译是去除注释 */
    "removeComments": true,
    // "noEmit": true,                        /* Do not emit outputs. */
    // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* Enable all strict type-checking options.启用所有严格的类型检查选项 */
    // "strict": true
    /* Raise error on expressions and declarations with an implied 'any' type. 在隐含的“any”类型的表达式和声明上引发错误*/
    /*"noImplicitAny": true, 必须手动的指定any;为false可以省略指定true*/
    "noImplicitAny": true,
    /* Enable strict null checks.启用严格的空检查  为false const teacher: string = null; null是可以赋值给其他基础类型的*/
    "strictNullChecks": false,
    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */
    // "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
    // "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
    // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */

    /* Additional Checks */
    /* Report errors on unused locals. 报告未使用的变量的错误 */
    // "noUnusedLocals": true,
    /* Report errors on unused parameters. 报告未使用参数的错误  针对函数中没有使用到的参数*/
    //  "noUnusedParameters": true,
    // "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
    // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */

    /* Module Resolution Options */
    // "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
    // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [],                       /* List of folders to include type definitions from. */
    // "types": [],                           /* Type declaration files to be included in compilation. */
    // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true
    /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */
    // "allowUmdGlobalAccess": true,          /* Allow accessing UMD globals from modules. */

    /* Source Map Options */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    // "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */

    /* Advanced Options */
    "forceConsistentCasingInFileNames": true
    /* Disallow inconsistently-cased references to the same file. */
  }
}
